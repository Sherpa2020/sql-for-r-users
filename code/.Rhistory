copy_to(dest = con, # remote data source
df = flights) # a local dataframe
copy_to(dest = con, # remote data source
df = airports) # a local dataframe
# Note that we didn't load the data.
src_dbi(con)
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
drv <- dbDriver("PostgreSQL")
drv <- dbDriver("RPostgreSQL")
drv <- dbDriver("RPostgres")
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
gapminder # toy example
)
gapminder %>%
count(continent)
# Just add a new argument `sort = TRUE`
gapminder %>%
count(continent, sort = TRUE)
# Same as above
gapminder %>%
count(continent) %>%
arrange(desc(n))
gapminder %>%
count(continent, year, sort = TRUE)
gapminder %>%
tally()
gapminder %>%
select(continent, country) %>%
add_tally()
# Add count as a column
gapminder %>%
group_by(continent) %>%
add_count(year)
# Provide summary statistics
gapminder %>%
group_by(continent) %>%
count(year)
gapminder %>%
group_by(continent) %>%
summarise(n = n(),
mean_gdp = mean(gdpPercap),
sd_gdp = sd(gdpPercap))
# Create a wide-shaped data example
wide_gapminder <- gapminder %>%
filter(continent == "Europe") %>%
pivot_wider(names_from = country,
values_from = gdpPercap)
# Apply summarise_all
wide_gapminder %>%
select(-c(1:4)) %>%
summarise_all(mean, na.rm = TRUE)
wide_gapminder %>%
summarise_if(is.double, mean, na.rm = TRUE)
wide_gapminder %>%
summarise_at(vars(-c(1:4)),
mean, na.rm = TRUE)
wide_gapminder %>%
summarise_at(vars(contains("life")),
mean, na.rm = TRUE)
wide_gapminder %>%
summarise(across(Albania:`United Kingdom`, mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(is.double, mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(-c(1:4),
mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(contains("life"),
mean, na.rm = TRUE))
wide_gapminder %>%
mutate(across(is.double, mean, na.rm = TRUE))
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
gapminder # toy example
)
gapminder %>%
count(continent)
# Just add a new argument `sort = TRUE`
gapminder %>%
count(continent, sort = TRUE)
# Same as above
gapminder %>%
count(continent) %>%
arrange(desc(n))
# Just add a new argument `sort = TRUE`
gapminder %>%
count(continent, sort = TRUE)
# Same as above; How nice!
gapminder %>%
count(continent) %>%
arrange(desc(n))
gapminder %>%
count(continent, year, sort = TRUE)
gapminder %>%
tally()
gapminder %>%
select(continent, country) %>%
add_tally()
# Add count as a column
gapminder %>%
group_by(continent) %>%
add_count(year)
# Provide summary statistics
gapminder %>%
group_by(continent) %>%
count(year)
gapminder %>%
group_by(continent) %>%
summarise(n = n(),
mean_gdp = mean(gdpPercap),
sd_gdp = sd(gdpPercap))
# Create a wide-shaped data example
wide_gapminder <- gapminder %>%
filter(continent == "Europe") %>%
pivot_wider(names_from = country,
values_from = gdpPercap)
# Apply summarise_all
wide_gapminder %>%
select(-c(1:4)) %>%
summarise_all(mean, na.rm = TRUE)
wide_gapminder %>%
summarise_if(is.double, mean, na.rm = TRUE)
wide_gapminder %>%
summarise_at(vars(-c(1:4)),
mean, na.rm = TRUE)
wide_gapminder %>%
summarise_at(vars(contains("life")),
mean, na.rm = TRUE)
wide_gapminder %>%
summarise(across(Albania:`United Kingdom`, mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(Albania:`United Kingdom`, mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(is.double, mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(-c(1:4),
mean, na.rm = TRUE))
wide_gapminder %>%
summarise(across(contains("life"),
mean, na.rm = TRUE))
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
modelr, # for using the tidyverse framework to model outcomes
gapminder # data
)
gapminder %>%
group_by(continent) %>% #
summarise(mean_gdp = mean(gdpPercap))
gapminder %>%
group_by(continent) %>% #
summarise(mean_gdp = mean(gdpPercap),
count = n())
# The Interquartile Range = The Difference Between 75t and 25t Percentiles
gapminder %>%
group_by(continent) %>% #
summarise(IQR_gdp = IQR(gdpPercap))
gapminder %>%
group_by(continent) %>% #
summarise(min_gdp = min(gdpPercap),
max_gdp = max(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(first_gdp = first(gdpPercap),
last_gdp = last(gdpPercap))
gapminder %>%
group_by(continent) %>%
arrange(gdpPercap) %>% # Adding arrange
summarise(first_gdp = first(gdpPercap),
last_gdp = last(gdpPercap))
gapminder %>%
group_by(continent) %>%
summarise(ns = n())
gapminder %>%
group_by(continent) %>%
summarise(rich_countries = mean(gdpPercap > 20000))
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
nested
nested <- gapminder %>%
nest_by(country, continent)
nested
nested$data[[1]]
lm_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
nested <- gapminder %>%
group_by(country, continent) %>%
nest()
# country & continent (two grouping variables) + data
names(nested)
# Data = listed columns
nested$data[[1]]
lm_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Apply m_model to the nested data
nested <- nested %>%
mutate(models = purrr::map(data, lm_model)) # Add the list object as a new column
# Display the result by filtering rows
nested %>%
filter(continent == "Asia")
glanced <- nested %>%
mutate(glance = map(models, broom::glance))
glanced %>%
unnest(glance) %>%
arrange(BIC) # Low to High; Lower BIC indicates a better model fit
glanced %>%
unnest(glance) %>%
ggplot(aes(continent, BIC)) +
geom_jitter(width = 0.5)
mtcars %>%
group_by(cyl) %>%
summarise(q = quantile(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(q = list(quantile(mpg)))
mtcars %>%
group_by(cyl) %>%
summarise(q = list(quantile(mpg))) %>%
unnest()
# p_load loads and, if necessary, install missing packages.
# install.packages() + library() = p_load()
# If you just want to install, then use p_install()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
gapminder # toy data
)
starwars %>%
filter(gender == "female") %>%
arrange(desc(height))
# First example
starwars %>%
filter(height < 180, height > 160) %>%
nrow()
# Same as above
starwars %>%
filter(height < 180 & height > 160) %>%
nrow()
# Not same as above
starwars %>%
filter(height < 180 | height > 160) %>%
nrow()
# Same outcome as above but note the difference in boundary values
starwars %>%
filter(between(height, 161, 179)) %>%
nrow()
# Filter names include ars; `grepl` is a base R function
starwars %>%
filter(grepl("ars", tolower(name)))
# Or, if you prefer dplyr way
starwars %>%
filter(str_detect(tolower(name), "ars"))
# Filter brown and black hair_color
starwars %>%
filter(hair_color %in% c("black", "brown"))
starwars %>%
arrange(desc(height)) %>%
slice(1:6)
starwars %>%
arrange(desc(height)) %>%
slice(1:6)
starwars %>%
slice_frac(0.10,
replace = FALSE)
starwars %>%
slice_sample(0.10,
replace = FALSE)
# For reproducibility
set.seed(1234)
# Old way
starwars %>%
sample_frac(0.10,
replace = FALSE) # Without replacement
# New way
starwars %>%
slice_sample(prop = 0.10,
replace = FALSE)
# Old way
starwars %>%
sample_n(20,
replace = FALSE) # Without replacement
# New way
# New way
starwars %>%
slice_sample(n = 20,
replace = FALSE) # Without replacement
# Old way
starwars %>%
top_n(10, height)
# New way
starwars %>%
slice_max(height, n = 10)
install.packages("rgdal")
# Data
pacman::p_load(tidycensus)
us_rent_income
pacman::p_load(tidycensus)
install.packages("tidycensus", dependencies = TRUE)
# Data
pacman::p_load(tidycensus)
us_rent_income
library(tidycensus)
install.packages("tidycensus")
library(tidycensus, repo = 'https://mac.R-project.org')
install.packages(tidycensus,
repo = 'https://mac.R-project.org')
install.packages("tidycensus",
repo = 'https://mac.R-project.org')
remove.packages("tidycensus")
install.packages("tidycensus")
install.packages("tidycensus")
install.packages(c("rgdal", "tidycensus"))
install.packages(c("rgdal", "tidycensus", "sf"))
version(R)
R --version
r --version
install.packages("ggplot2")
install.packages("atom-language-r")
quit()
quit()
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
install.packages("RSQLite")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
drv <- DBI::dbDriver("RPostgreSQL")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgreSQL, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- DBI::dbDriver("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
RPostgreSQL, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- DBI::dbDriver("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
# Define a backend engine
drv <- dbDriver("PostgreSQL")
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
# Define a backend engine
drv <- dbDriver("PostgreSQL")
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
# Define a backend engine
drv <- RSQLite::SQLite()
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
remove.packages("RSQLite")
remove.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
devtools::install_github("rstats-db/RSQLite")
install.packages("RSQLite")
install.packages("Rcpp", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("Rcpp", dependencies = TRUE, INSTALL_opts = "--no-lock")
install.packages("RSQLite")
install.packages("RSQLite", dependencies = TRUE)
install.packages("RSQLite")
# Run this, if knitting doesn't work
knitr::opts_chunk$set(error = TRUE)
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
RSQLite, # for SQLite
odbc, # backend engine; open data connectivity driver
RPostgres, # PostgreSQL
glue, # for gluing strings to data
tidyquery, # sqldf alternative
nycflights13 # for test data
)
# Resolving conflicting functions
conflict_prefer("filter", "dplyr")
conflict_prefer("sql", "dplyr")
# Define a backend engine
drv <- RSQLite::SQLite()
# Create an empty in-memory database
con <- DBI::dbConnect(drv,
dbname = ":memory:")
#con <- DBI::dbConnect(RMariaDB::MariaDB(),
# host = "database.rstudio.com",
# user = "hadley",
# password = rstudioapi::askForPassword("Database password")
#)
# Copy a local data frame to a DBI backend
copy_to(dest = con, # remote data source
df = flights) # a local dataframe
copy_to(dest = con, # remote data source
df = airports) # a local dataframe
# Note that we didn't load the data.
src_dbi(con)
install.packages(c("dplyr", "pkgload"))
install.packages("rmarkdown")
ls
pw
file.choose()
full_dataset <- read_csv("/home/jae/sql-for-r-tidyverse-users/raw_data/full_dataset.csv")
library(tidyverse)
full_dataset <- read_csv("/home/jae/sql-for-r-tidyverse-users/raw_data/full_dataset.csv")
