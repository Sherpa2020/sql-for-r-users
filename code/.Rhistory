mutate(v_score_text = factor(v_score_text != "Low", labels = c("LowScore","HighScore"))) %>%
rename(crime = c_charge_degree,
gender = sex,
score = v_score_text)
install.packages(c("digest", "modelr", "styler"))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel', force = TRUE)
install.packages(c("quanteda", "uuid"))
knitr::opts_chunk$set(fig.width = 12, fig.height = 8,
echo = FALSE, warning = FALSE, message = FALSE) # global setting for enlarging image size
# Clean up the environment
rm(list = ls())
# Import libraries (adapted from this link: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
ggpubr, # for arranging ggplots
ggthemes, # for fancy ggplot themes
estimatr, # for fast estimation for design-based inference
list, # stat methods for the item count technique and list experiment
MKinfer, # for inferential statistics
nonpar # for nonparametric inference
)
# The processed data
df <- read.csv("/home/jae/analyzing-list-experiments/processed_data/processed_survey.csv")
diff_means_test <- function(data) {
diff_summary <- data %>%
# Summarize
summarise_each(
funs(
# Different in means
diff_t1 = mean(.[treat == 2], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t2 = mean(.[treat == 3], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t3 = mean(.[treat == 4], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t4 = mean(.[treat == 5], na.rm = T) - mean(.[treat == 1], na.rm = T),
# Calculating confidence intervals
conf_t1 = (t.test(.[treat == 2], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t2 = (t.test(.[treat == 3], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t3 = (t.test(.[treat == 4], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t4 = (t.test(.[treat == 5], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2
),
direct, indirect
)
diff_summary %>%
gather(stat, val) %>% # stat = variables, val = values
separate(stat, into = c("var", "stat", "treat"), sep = "_") %>% # var = measures, stat = diff or conf, group = treatment status, val = values
spread(stat, val) %>% # reorder columns
mutate(var = replace(var, var == "direct", "Direct bias")) %>% # rename variables
mutate(var = replace(var, var == "indirect", "Indirect bias"))
}
# Save test results
ate.results <- diff_means_test(df)
# Recode values
ate.results$treat <- ate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
ate.results
conservatives <- df %>% filter(ideology <= 2)
moderates <- df %>% filter(ideology == 3)
liberals <- df %>% filter(ideology == 4 | ideology == 5)
undecided <- df %>% filter(ideology == 6)
cate.results <- bind_rows(
mutate(diff_means_test(conservatives), subgroup = "Conservatives"),
mutate(diff_means_test(moderates), subgroup = "Moderates"),
mutate(diff_means_test(liberals), subgroup = "Liberals"),
mutate(diff_means_test(undecided), subgroup = "Undecided")
)
# Recode values
cate.results$treat <- cate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
cate.results
boot_dmt <- function(data) {
diff_summary <- data %>%
# Summarize
summarise_each(
funs(
# Different in means
diff_t1 = mean(.[treat == 2], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t2 = mean(.[treat == 3], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t3 = mean(.[treat == 4], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t4 = mean(.[treat == 5], na.rm = T) - mean(.[treat == 1], na.rm = T),
# Calculating confidence intervals
conf_t1 = (MKinfer::boot.t.test(.[treat == 2], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t2 = (MKinfer::boot.t.test(.[treat == 3], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t3 = (MKinfer::boot.t.test(.[treat == 4], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t4 = (MKinfer::boot.t.test(.[treat == 5], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2
),
direct, indirect
)
diff_summary %>%
gather(stat, val) %>% # stat = variables, val = values
separate(stat, into = c("var", "stat", "treat"), sep = "_") %>% # var = measures, stat = diff or conf, group = treatment status, val = values
spread(stat, val) %>% # reorder columns
mutate(var = replace(var, var == "direct", "Direct bias")) %>% # rename variables
mutate(var = replace(var, var == "indirect", "Indirect bias"))
}
boot.cate.results <- bind_rows(
mutate(boot_dmt(conservatives), subgroup = "Conservatives"),
mutate(boot_dmt(moderates), subgroup = "Moderates"),
mutate(boot_dmt(liberals), subgroup = "Liberals"),
mutate(boot_dmt(undecided), subgroup = "Undecided")
)
# Recode values
boot.cate.results$treat <- boot.cate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
boot.cate.results
ate.results %>%
ggplot(aes(x = fct_reorder(treat, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
labs(title = "Treatment effects",
subtitle = " Direct bias: X group is stupid. \n Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Treatment status", y = "Estimated Average Treatment Effect",
col = "Bias type")
ggsave("/home/jae/analyzing-list-experiments/outputs/ate_results_plot.png", width = 10)
no_boot_plot <- cate.results %>%
ggplot(aes(x = fct_reorder(subgroup, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
facet_wrap(~treat) +
labs(title = "Heterogeneous treatment effects",
subtitle = "Direct bias: X group is stupid. Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Conditions", y = "Conditional Estimated Average Treatment Effect",
col = "Bias type") +
ylim(c(-0.4, 1.2))
boot_plot <- boot.cate.results %>%
ggplot(aes(x = fct_reorder(subgroup, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
facet_wrap(~treat) +
labs(title = "Heterogeneous treatment effects (with Bootstrapped CIs)",
subtitle = "Direct bias: X group is stupid. Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Conditions", y = "Conditional Estimated Average Treatment Effect",
col = "Bias type") +
ylim(c(-0.4, 1.2))
ggarrange(no_boot_plot, boot_plot, common.legend = TRUE,
ncol = 1, nrow = 2)
ggsave("/home/jae/analyzing-list-experiments/outputs/cate_comparison_plot.png", width = 10, height = 10)
# Clean up the environment
rm(list = ls())
# Import libraries (adapted from this link: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
ggpubr, # for arranging ggplots
ggthemes, # for fancy ggplot themes
estimatr, # for fast estimation for design-based inference
DACF, # for ceiling and or/floor data
MKinfer, # for inferential statistics
nonpar # for nonparametric inference
)
knitr::opts_chunk$set(fig.width = 12, fig.height = 8,
echo = FALSE, warning = FALSE, message = FALSE) # global setting for enlarging image size
# Clean up the environment
rm(list = ls())
# Import libraries (adapted from this link: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # for the tidyverse framework
ggpubr, # for arranging ggplots
ggthemes, # for fancy ggplot themes
estimatr, # for fast estimation for design-based inference
DACF, # for ceiling and or/floor data
MKinfer, # for inferential statistics
nonpar # for nonparametric inference
)
# The processed data
df <- read.csv("/home/jae/analyzing-list-experiments/processed_data/processed_survey.csv")
diff_means_test <- function(data) {
diff_summary <- data %>%
# Summarize
summarise_each(
funs(
# Different in means
diff_t1 = mean(.[treat == 2], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t2 = mean(.[treat == 3], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t3 = mean(.[treat == 4], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t4 = mean(.[treat == 5], na.rm = T) - mean(.[treat == 1], na.rm = T),
# Calculating confidence intervals
conf_t1 = (t.test(.[treat == 2], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t2 = (t.test(.[treat == 3], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t3 = (t.test(.[treat == 4], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2,
conf_t4 = (t.test(.[treat == 5], .[treat == 1])$conf.int[2] - t.test(.[treat == 1], .[treat == 1])$conf.int[1]) / 2
),
direct, indirect
)
diff_summary %>%
gather(stat, val) %>% # stat = variables, val = values
separate(stat, into = c("var", "stat", "treat"), sep = "_") %>% # var = measures, stat = diff or conf, group = treatment status, val = values
spread(stat, val) %>% # reorder columns
mutate(var = replace(var, var == "direct", "Direct bias")) %>% # rename variables
mutate(var = replace(var, var == "indirect", "Indirect bias"))
}
# Save test results
ate.results <- diff_means_test(df)
# Recode values
ate.results$treat <- ate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
ate.results
conservatives <- df %>% filter(ideology <= 2)
moderates <- df %>% filter(ideology == 3)
liberals <- df %>% filter(ideology == 4 | ideology == 5)
undecided <- df %>% filter(ideology == 6)
cate.results <- bind_rows(
mutate(diff_means_test(conservatives), subgroup = "Conservatives"),
mutate(diff_means_test(moderates), subgroup = "Moderates"),
mutate(diff_means_test(liberals), subgroup = "Liberals"),
mutate(diff_means_test(undecided), subgroup = "Undecided")
)
# Recode values
cate.results$treat <- cate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
cate.results
boot_dmt <- function(data) {
diff_summary <- data %>%
# Summarize
summarise_each(
funs(
# Different in means
diff_t1 = mean(.[treat == 2], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t2 = mean(.[treat == 3], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t3 = mean(.[treat == 4], na.rm = T) - mean(.[treat == 1], na.rm = T),
diff_t4 = mean(.[treat == 5], na.rm = T) - mean(.[treat == 1], na.rm = T),
# Calculating confidence intervals
conf_t1 = (MKinfer::boot.t.test(.[treat == 2], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t2 = (MKinfer::boot.t.test(.[treat == 3], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t3 = (MKinfer::boot.t.test(.[treat == 4], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2,
conf_t4 = (MKinfer::boot.t.test(.[treat == 5], .[treat == 1], R = 1000)$boot.conf.int[2] - MKinfer::boot.t.test(.[treat == 1], .[treat == 1], R = 1000)$boot.conf.int[1]) / 2
),
direct, indirect
)
diff_summary %>%
gather(stat, val) %>% # stat = variables, val = values
separate(stat, into = c("var", "stat", "treat"), sep = "_") %>% # var = measures, stat = diff or conf, group = treatment status, val = values
spread(stat, val) %>% # reorder columns
mutate(var = replace(var, var == "direct", "Direct bias")) %>% # rename variables
mutate(var = replace(var, var == "indirect", "Indirect bias"))
}
boot.cate.results <- bind_rows(
mutate(boot_dmt(conservatives), subgroup = "Conservatives"),
mutate(boot_dmt(moderates), subgroup = "Moderates"),
mutate(boot_dmt(liberals), subgroup = "Liberals"),
mutate(boot_dmt(undecided), subgroup = "Undecided")
)
# Recode values
boot.cate.results$treat <- boot.cate.results$treat %>%
recode(t1 = "Low-income S. Koreans",
t2 = "North Korean refugees",
t3 = "Korean Chinese migrants",
t4 = "Indonesian migrants")
# Tidy model ouutcomes
boot.cate.results
ate.results %>%
ggplot(aes(x = fct_reorder(treat, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
labs(title = "Treatment effects",
subtitle = " Direct bias: X group is stupid. \n Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Treatment status", y = "Estimated Average Treatment Effect",
col = "Bias type")
ggsave("/home/jae/analyzing-list-experiments/outputs/ate_results_plot.png", width = 10)
no_boot_plot <- cate.results %>%
ggplot(aes(x = fct_reorder(subgroup, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
facet_wrap(~treat) +
labs(title = "Heterogeneous treatment effects",
subtitle = "Direct bias: X group is stupid. Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Conditions", y = "Conditional Estimated Average Treatment Effect",
col = "Bias type") +
ylim(c(-0.4, 1.2))
boot_plot <- boot.cate.results %>%
ggplot(aes(x = fct_reorder(subgroup, diff), y = diff, ymin = diff - conf, ymax = diff + conf, col = var)) +
geom_pointrange() +
theme_base() +
geom_hline(yintercept = c(0), linetype = "dotted") +
coord_flip() +
scale_colour_manual(values = c("Direct bias" = "red", "Indirect bias" = "blue")) +
facet_wrap(~treat) +
labs(title = "Heterogeneous treatment effects (with Bootstrapped CIs)",
subtitle = "Direct bias: X group is stupid. Indirect bias: X group doesn't deserve support.",
caption = "Source: Original mobile survey (N = 1464)",
x = "Conditions", y = "Conditional Estimated Average Treatment Effect",
col = "Bias type") +
ylim(c(-0.4, 1.2))
ggarrange(no_boot_plot, boot_plot, common.legend = TRUE,
ncol = 1, nrow = 2)
ggsave("/home/jae/analyzing-list-experiments/outputs/cate_comparison_plot.png", width = 10, height = 10)
aggregate(df$direct, mean, by = treat)
aggregate(df$direct, mean, by = df$treat)
aggregate(df$direct, mean, by = list(df$treat))
direct <- aggregate(df$direct, mean, by = list(df$treat))
rec.mean.var(direct)
is.na(df$direct)
sum(is.na(df$direct))
sum(is.na(df$treat))
df %>%
ggplot(aes(x = treat, y = direct)) +
geom_density()
df %>%
ggplot(aes(x = direct)) +
geom_density()
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_wrap(~treat)
theme_set(theme_base())
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_wrap(~treat)
df %>%
gather(measures, responses, c("direct", "indirect")) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_wrap(treat~measures)
df %>%
gather(measures, responses, c("direct", "indirect")) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(treat~measures)
df %>%
gather(measures, responses, c("direct", "indirect")) %>%
ggplot(aes(x = responses), col = treat) +
geom_density() +
facet_grid(~measures)
df %>%
gather(measures, responses, c("direct", "indirect"))
df %>%
gather(measures, responses, c("direct", "indirect"))
ggplot(aes(x = responses), col = measures) +
geom_density() +
facet_grid(~treat)
df %>%
gather(measures, responses, c("direct", "indirect")) %>%
ggplot(aes(x = responses), col = measures) +
geom_density() +
facet_wrap(~treat)
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_grid(~treat)
df %>%
ggplot(aes(x = direct), col = treat) +
geom_density()
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_grid(~treat)
df %>%
ggplot(aes(x = indirect)) +
geom_density() +
facet_grid(~treat)
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_grid(~treat) +
coord_flip()
df %>%
ggplot(aes(x = direct)) +
geom_density() +
facet_grid(~treat)
df %>%
gather(measures, responses, c(direct, indirect))
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat)
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat)
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat, labeller = labeller(direct = "Direct bias", indirect = "Indirect bias")) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat,
labeller = labeller("Direct bias" = "direct", "Indirect bias" = "indirect")) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat,
labeller = labeller(measures = c("Direct bias", "Indirect bias"))) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat,
labeller = labeller(measures = c("Direct bias", "Indirect bias"),
treat = c("Control","Low-income South Koreans",
"North Korean refugees", "Korean Chinese migrants",
"Indonesian migrants"))) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
mutate(measures = factor(measures),
responses = factor(responses)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat,
labeller = labeller(measures = c("Direct bias", "Indirect bias"),
treat = c("Control","Low-income South Koreans",
"North Korean refugees", "Korean Chinese migrants",
"Indonesian migrants"))) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat,
labeller = labeller(measures = c("Direct bias", "Indirect bias"),
treat = c("Control","Low-income South Koreans",
"North Korean refugees", "Korean Chinese migrants",
"Indonesian migrants"))) +
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat) %>%
labs(x = "Responses", y = "Density")
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat) +
labs(x = "Responses", y = "Density")
levels(df$treat)
df %>%
gather(measures, responses, c(direct, indirect)) %>%
ggplot(aes(x = responses)) +
geom_density() +
facet_grid(measures~treat) +
labs(x = "Responses", y = "Density")
install.packages(c("dendextend", "sp"))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
ggthemes, # for more themes
patchwork, # for arranging ggplots
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
odbc, # backend engine; open data connectivity driver
sqldf # for running SQL in R
)
conflict_prefer("filter", "dplyr")
# Acces to the DB
con <- DBI::dbConnect(odbc::odbc(), "datawarehouse")
con <- DBI::dbConnect(RSQLite:SQLite(), dbname = ":memory")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, # tidyverse packages
conflicted, # an alternative conflict resolution strategy
ggthemes, # for more themes
patchwork, # for arranging ggplots
dbplyr, # to use database with dplyr
DBI, # for using SQL queries
